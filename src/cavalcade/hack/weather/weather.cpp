#include "weather.hpp"
#include "../../ctx/ctx.hpp"
#include "../../gui/cfg/cfg.hpp"

constexpr static unsigned char collide_data[] = {
	0xB8, 0x01, 0x00, 0x00, 0x56, 0x50, 0x48, 0x59, 0x00, 0x01, 0x00, 0x00,  0x9C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F,
	0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x20, 0x16, 0x6A, 0xC1,  0xC0, 0x0E, 0x1C, 0xC1, 0x80, 0x13, 0xD0, 0x3F, 0xE2, 0x26, 0x11, 0x48,
	0xE2, 0x26, 0x11, 0x48, 0xE2, 0x26, 0x11, 0x48, 0x72, 0x4E, 0x08, 0xF44, 0xD1, 0x9C, 0x01, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x49, 0x56, 0x50, 0x53, 0xD0, 0x00, 0x00, 0x00,  0x06, 0x00, 0x00, 0x00, 0x04, 0x15, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,
	0x00, 0x90, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x01, 0x00, 0x03, 0x00,  0x02, 0x00, 0x12, 0x00, 0x01, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFD, 0x7F,
	0x01, 0x00, 0x15, 0x00, 0x03, 0x00, 0x28, 0x00, 0x02, 0xB0, 0x00, 0x00,  0x00, 0x00, 0x06, 0x00, 0x04, 0x00, 0x0F, 0x00, 0x01, 0x00, 0xF6, 0x7F,
	0x03, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x05, 0x00, 0x15, 0x00,  0x04, 0x00, 0xFA, 0x7F, 0x04, 0x70, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00,
	0x06, 0x00, 0x13, 0x00, 0x05, 0x00, 0xFA, 0x7F, 0x05, 0x60, 0x00, 0x00,  0x00, 0x00, 0xEE, 0x7F, 0x02, 0x00, 0x18, 0x00, 0x06, 0x00, 0xFA, 0x7F,
	0x06, 0x50, 0x00, 0x00, 0x01, 0x00, 0xF1, 0x7F, 0x04, 0x00, 0x03, 0x00,  0x03, 0x00, 0xEB, 0x7F, 0x07, 0x40, 0x00, 0x00, 0x03, 0x00, 0xFD, 0x7F,
	0x04, 0x00, 0x04, 0x00, 0x07, 0x00, 0x0C, 0x00, 0x08, 0x10, 0x00, 0x00,  0x05, 0x00, 0x06, 0x00, 0x07, 0x00, 0xFC, 0x7F, 0x04, 0x00, 0xEB, 0x7F,
	0x09, 0x00, 0x00, 0x00, 0x05, 0x00, 0xED, 0x7F, 0x06, 0x00, 0x03, 0x00,  0x07, 0x00, 0xFA, 0x7F, 0x0A, 0x30, 0x00, 0x00, 0x07, 0x00, 0xFD, 0x7F,
	0x06, 0x00, 0x03, 0x00, 0x03, 0x00, 0xF4, 0x7F, 0x0B, 0x20, 0x00, 0x00,  0x03, 0x00, 0xFD, 0x7F, 0x06, 0x00, 0xE8, 0x7F, 0x02, 0x00, 0xD8, 0x7F,
	0x46, 0xAD, 0x9D, 0xC3, 0x1F, 0x0D, 0x9C, 0xC3, 0x80, 0xAE, 0xAA, 0x43,  0x00, 0x00, 0x00, 0x00, 0x46, 0xAD, 0x9D, 0xC3, 0x33, 0x4C, 0x92, 0x43,
	0x80, 0xAE, 0xAA, 0x43, 0x00, 0x00, 0x00, 0x00, 0x46, 0xAD, 0x9D, 0xC3,  0x1F, 0x0D, 0x9C, 0xC3, 0x59, 0x0E, 0xA9, 0xC3, 0x00, 0x00, 0x00, 0x00,
	0x46, 0xAD, 0x9D, 0xC3, 0x33, 0x4C, 0x92, 0x43, 0x59, 0x0E, 0xA9, 0xC3,  0x00, 0x00, 0x00, 0x00, 0xE4, 0x0B, 0x8F, 0x43, 0x33, 0x4C, 0x92, 0x43,
	0x80, 0xAE, 0xAA, 0x43, 0x00, 0x00, 0x00, 0x00, 0xE4, 0x0B, 0x8F, 0x43,  0x1F, 0x0D, 0x9C, 0xC3, 0x80, 0xAE, 0xAA, 0x43, 0x00, 0x00, 0x00, 0x00,
	0xE4, 0x0B, 0x8F, 0x43, 0x1F, 0x0D, 0x9C, 0xC3, 0x59, 0x0E, 0xA9, 0xC3,  0x00, 0x00, 0x00, 0x00, 0xE4, 0x0B, 0x8F, 0x43, 0x33, 0x4C, 0x92, 0x43,
	0x59, 0x0E, 0xA9, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0xB0, 0xFE, 0xFF, 0xFF, 0x20, 0x16, 0x6A, 0xC1, 0xC0, 0x0E, 0x1C, 0xC1,
	0x80, 0x13, 0xD0, 0x3F, 0x72, 0x4E, 0x08, 0x44, 0x8A, 0x8B, 0x9C, 0x00,  0x73, 0x6F, 0x6C, 0x69, 0x64, 0x20, 0x7B, 0x0A, 0x22, 0x69, 0x6E, 0x64,
	0x65, 0x78, 0x22, 0x20, 0x22, 0x30, 0x22, 0x0A, 0x22, 0x6D, 0x61, 0x73,  0x73, 0x22, 0x20, 0x22, 0x35, 0x30, 0x30, 0x30, 0x30, 0x2E, 0x30, 0x30,
	0x30, 0x30, 0x30, 0x30, 0x22, 0x0A, 0x22, 0x73, 0x75, 0x72, 0x66, 0x61,  0x63, 0x65, 0x70, 0x72, 0x6F, 0x70, 0x22, 0x20, 0x22, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6C, 0x74, 0x22, 0x0A, 0x22, 0x76, 0x6F, 0x6C, 0x75, 0x6D,  0x65, 0x22, 0x20, 0x22, 0x31, 0x35, 0x30, 0x38, 0x30, 0x32, 0x33, 0x32,
	0x30, 0x35, 0x38, 0x38, 0x38, 0x30, 0x2E, 0x30, 0x30, 0x30, 0x30, 0x30,  0x30, 0x22, 0x0A, 0x7D, 0x0A, 0x00
};

void hack::weather::run( ) {
	static auto& wh = gui::cfg::get< i32 >( HASH_CT( "main:group1:weather" ) );

	if ( !wh ) {
		reset( );
		return;
	}

	if ( m_last_type.has_value( ) && m_last_type.value( ) != wh )
		reset( );

	m_last_type = wh;

	if ( m_created )
		return;

	memset( &m_collide, 0, sizeof( m_collide ) );

	static sdk::client_class* prec;
	if ( !prec ) {
		for ( auto clazz = g_csgo.m_client->get_all_classes( ); clazz; clazz = clazz->m_next ) {
			if ( clazz->m_class_id == sdk::class_id::PRECIPITATION ) {
				prec = clazz;
				break;
			}
		}
	}

	if ( prec && prec->m_create ) {
		auto* rain_networkable = ( ( void* ( * )( int, int ))prec->m_create )( 2048 - 1, 0 );
		if ( !rain_networkable )
			return;

		sdk::interfaces::client_unknown* rain_unk = ( ( sdk::interfaces::client_renderable* )rain_networkable )->get_client_unknown( );
		if ( !rain_unk )
			return;

		auto rain_ent = ( sdk::base_entity* )rain_unk->get_base_entity( );
		if ( !rain_ent )
			return;

		if ( !rain_ent->get_client_networkable( ) )
			return;

		rain_ent->pre_data_update( sdk::data_update_type::CREATED );
		rain_ent->on_pre_data_changed( sdk::data_update_type::CREATED );
		rain_ent->index( ) = -1;

		if ( g_ctx.m_cvars.r_rainradius->get_float( ) != 1000.F )
			g_ctx.m_cvars.r_rainradius->set_value( 1000.F );

		*( int* )( ( uintptr_t )rain_ent + 0xA00 ) = wh == 1 ? 4 : 7;

		rain_ent->get_collideable( )->obb_mins( ) = math::v3f( -32768.F, -32768.F, -32768.F );
		rain_ent->get_collideable( )->obb_maxs( ) = math::v3f( 32768.F, 32768.F, 32768.F );

		g_csgo.m_physics_collisions->VCollideLoad( &m_collide, 1, ( const char* )collide_data, sizeof( collide_data ) );

		rain_ent->model_index( ) = -1;

		rain_ent->on_data_changed( sdk::data_update_type::CREATED );
		rain_ent->post_data_update( sdk::data_update_type::CREATED );

		m_created = true;
	}
}

void hack::weather::reset( ) {
	for ( auto i = 0; i <= g_csgo.m_ent_list->get_highest_entity_index( ); ++i ) {
		auto ent = g_csgo.m_ent_list->get< sdk::base_entity* >( i );
		if ( !ent )
			continue;

		auto clazz = ent->get_client_class( );
		if ( !clazz )
			continue;

		if ( clazz->m_class_id == sdk::class_id::PRECIPITATION ) {
			if ( ent->get_client_networkable( ) ) {
				ent->pre_data_update( sdk::data_update_type::CREATED );
				ent->on_pre_data_changed( sdk::data_update_type::CREATED );

				*( int* )( ( uintptr_t )ent + 0xA00 ) = -1;

				ent->get_collideable( )->obb_mins( ) = math::v3f{ 0, 0, 0 };
				ent->get_collideable( )->obb_maxs( ) = math::v3f{ 0, 0, 0 };

				ent->on_data_changed( sdk::data_update_type::CREATED );
				ent->post_data_update( sdk::data_update_type::CREATED );
				ent->release( );
			}
		}
	}

	g_csgo.m_physics_collisions->VCollideUnload( &m_collide );
	m_created = false;
}